# Generated by Django 5.1.4 on 2025-03-20 05:16

import datetime
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='StudyMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('module', models.CharField(max_length=255)),
                ('semester', models.PositiveIntegerField()),
                ('description', models.TextField(help_text='E.g., Topics discussed: Basics of Machine Learning, Linear Regression, Neural Networks...')),
                ('file', models.FileField(upload_to='study_materials/')),
            ],
            options={
                'verbose_name': 'Study Material',
                'verbose_name_plural': 'Study Materials',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('stcians', 'STCians'), ('student_other', 'Student (Other Colleges)'), ('teacher', 'Teacher'), ('alumni', 'Alumni')], default='stcians', max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('department_name', models.CharField(blank=True, max_length=50, null=True)),
                ('semester', models.CharField(blank=True, max_length=10, null=True)),
                ('admission_number', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('textbook_name', models.CharField(max_length=200)),
                ('author_name', models.CharField(max_length=200)),
                ('subject', models.CharField(max_length=200)),
                ('semester', models.PositiveIntegerField()),
                ('image', models.ImageField(upload_to='book_images/')),
                ('feedback', models.TextField(blank=True, null=True)),
                ('rating', models.PositiveIntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('price', models.CharField(default='free', max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BookRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('donation_place', models.CharField(max_length=255)),
                ('donation_time', models.TimeField()),
                ('donation_date', models.DateField()),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accepted', 'Accepted'), ('Rejected', 'Rejected')], default='Pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.book')),
                ('donor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to=settings.AUTH_USER_MODEL)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('donation_date', models.DateField(blank=True, null=True)),
                ('donation_time', models.TimeField(blank=True, null=True)),
                ('donation_place', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('Accepted', 'Accepted'), ('Rejected', 'Rejected')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.book')),
                ('donor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='donor_notifications', to=settings.AUTH_USER_MODEL)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receiver_notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SellRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place', models.CharField(max_length=255, verbose_name='Meeting Place')),
                ('time', models.CharField(max_length=50, verbose_name='Meeting Time')),
                ('date', models.DateField(default=datetime.date.today, verbose_name='Meeting Date')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accepted', 'Accepted'), ('Rejected', 'Rejected'), ('Completed', 'Completed')], default='Pending', max_length=20, verbose_name='Request Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Request Created At')),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buy_requests', to=settings.AUTH_USER_MODEL, verbose_name='Buyer')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sell_requests', to=settings.AUTH_USER_MODEL, verbose_name='Requester')),
            ],
        ),
        migrations.CreateModel(
            name='SellNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meeting_date', models.DateField(blank=True, null=True)),
                ('meeting_time', models.TimeField(blank=True, null=True)),
                ('meeting_place', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('Accepted', 'Accepted'), ('Rejected', 'Rejected')], max_length=20, verbose_name='Request Status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buy_notifications', to=settings.AUTH_USER_MODEL)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requester_notifications', to=settings.AUTH_USER_MODEL)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sell_notifications', to=settings.AUTH_USER_MODEL)),
                ('sell_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.sellrequest')),
            ],
        ),
        migrations.CreateModel(
            name='Textbook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Textbook Name')),
                ('author', models.CharField(max_length=255, verbose_name='Author Name')),
                ('subject', models.CharField(max_length=255, verbose_name='Subject')),
                ('semester', models.PositiveSmallIntegerField(choices=[(1, 'Semester 1'), (2, 'Semester 2'), (3, 'Semester 3'), (4, 'Semester 4'), (5, 'Semester 5'), (6, 'Semester 6'), (7, 'Semester 7'), (8, 'Semester 8')], verbose_name='Semester')),
                ('image', models.ImageField(upload_to='textbook_images/', verbose_name='Image')),
                ('feedback', models.TextField(blank=True, null=True, verbose_name='Feedback')),
                ('rating', models.PositiveSmallIntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], null=True, verbose_name='Rating')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (INR)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Uploaded By')),
            ],
        ),
        migrations.AddField(
            model_name='sellrequest',
            name='textbook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.textbook', verbose_name='Requested Textbook'),
        ),
    ]
